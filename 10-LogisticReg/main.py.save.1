

# read kaggle facial expression recognition challenge dataset (fer2013.csv)
# https://www.kaggle.com/c/challenges-in-representation-learning-facial-expression-recognition-challenge
import numpy as np
import matplotlib.pyplot as plt
import sys
import pickle
import time
from sklearn.metrics import precision_recall_curve
import cv2
import os

def sigmoid(x):
    return 1/(1+np.exp(-x))

def get_data():
    # angry, disgust, fear, happy, sad, surprise, neutral
    with open("fer2013.csv") as f:
        content = f.readlines()

    lines = np.array(content)
    num_of_instances = lines.size
    print("number of instances: ",num_of_instances)
    print("instance length: ",len(lines[1].split(",")[1].split(" ")))

    x_train, y_train, x_test, y_test = [], [], [], []

    for i in range(1,num_of_instances):
        emotion, img, usage = lines[i].split(",")
        pixels = np.array(img.split(" "), 'float32')
        emotion = 1 if int(emotion)==3 else 0 # Only for happiness
        if 'Training' in usage:
            y_train.append(emotion)
            x_train.append(pixels)
        elif 'PublicTest' in usage:
            y_test.append(emotion)
            x_test.append(pixels)

    #------------------------------
    #data transformation for train and test sets
    x_train = np.array(x_train, 'float64')
    y_train = np.array(y_train, 'float64')
    x_test = np.array(x_test, 'float64')
    y_test = np.array(y_test, 'float64')

    x_train /= 255 #normalize inputs between [0, 1]
    x_test /= 255

    x_train = x_train.reshape(x_train.shape[0], 48, 48)
    x_test = x_test.reshape(x_test.shape[0], 48, 48)
    y_train = y_train.reshape(y_train.shape[0], 1)
    y_test = y_test.reshape(y_test.shape[0], 1)

    print(x_train.shape[0], 'train samples')
    print(x_test.shape[0], 'test samples')

    # plt.hist(y_train, max(y_train)+1); plt.show()

    return x_train, y_train, x_test, y_test

class Model():
    def __init__(self):
        params = 48*48 # image reshape
        out = 1 # smile label
        self.lr = 0.00001 # Change if you want
        self.W = np.random.randn(params, out)
        self.b = np.random.randn(out)
        self.train_time = 0

    def forward(self, image):
        image = image.reshape(image.shape[0], -1)
        out = np.dot(image, self.W) + self.b
        return out

    def compute_loss(self, pred, gt):
        J = (-1/pred.shape[0]) * np.sum(np.multiply(gt, np.log(sigmoid(pred))) + np.multiply((1-gt), np.log(1 - sigmoid(pred))))
        return J

    def compute_gradient(self, image, pred, gt):
        image = image.reshape(image.shape[0], -1)
        W_grad = np.dot(image.T, pred-gt)/image.shape[0]
        self.W -= W_grad*self.lr

        b_grad = np.sum(pred-gt)/image.shape[0]
        self.b -= b_grad*self.lr

def train(model):
    # save total training time
    start_time = time.time()
    x_train, y_train, x_test, y_test = get_data()
    batch_size = 100 # Change if you want
    epochs = 5  # Change if you want
    for i in range(epochs):
        loss = []
        for j in range(0,x_train.shape[0], batch_size):
            _x_train = x_train[j:j+batch_size]
            _y_train = y_train[j:j+batch_size]
            out = model.forward(_x_train)
            loss.append(model.compute_loss(out, _y_train))
            model.compute_gradient(_x_train, out, _y_train)
        out = model.forward(x_test)                
        loss_test = model.compute_loss(out, y_test)
        print('Epoch {:6d}: {:.5f} | test: {:.5f}'.format(i, np.array(loss).mean(), loss_test))
    # store training time and losses
    model.train_time = time.time() - start_time
    np.save("loss_e"+ str(epochs)+"_batch"+ str(batch_size) +"_lr"+str(model.lr)+".npy", np.array(loss))
    # pickle the trained model object
    model_file = open("model_e"+ str(epochs) + "_batch"+ str(batch_size) +"_lr"+ str(model.lr) +".obj", "wb")
    pickle.dump(model, model_file)

def plot(train_loss, test_loss):
    assert train_loss.shape==test_loss.shape,  "Different length matrices provided."
    # set color scales for train (blue) and test (red) set
    norm = mpl.colors.Normalize(vmin=0, vmax=train_loss.shape[0])
    cmap_train = mpl.cm.ScalarMappable(norm=norm, cmap=mpl.cm.Blues)
    cmap_train.set_array([])
    cmap_test = mpl.cm.ScalarMappable(norm=norm, cmap=mpl.cm.Reds)
    cmap_test.set_array([])
    # one x tick per epoch
    x_ticks = range(train_loss.shape[1])
    
    # plot train and test losses at R learning rates across N epochs
    fig, ax = plt.subplots(dpi=100)
    for i in range(train_loss.shape[0]):
       ax.plot(x_ticks, train_loss[i,:], c=cmap_train.to_rgba(i + 1))
       ax.plot(x_ticks, test_loss[i,:], c=cmap_test.to_rgba(i + 1))
    plt.gca().legend(('Train loss, small lr','Test loss, small lr'))
    plt.show()
    # TODO guardar imagen en pdf

def test(model):
    x_train, y_train, x_test, y_test = get_data()
    y_pred = np.zeros((x_test.shape[0],1)) 
    y_pred[model.forward(x_test) < 0] = 1
    precision, recall, thresholds = precision_recall_curve(y_test, sigmoid(model.forward(x_test)))    
    # plot ROC curve
    plt.plot(recall, precision)
    # and report goodness measures
    Fmeasure = (2*precision*recall)/(precision + recall)
    FmeasureMax = Fmeasure.max()
    print("Max F1-measure: "+ str(FmeasureMax))
    print("ACA: " + str(0))

if __name__ == '__main__':
    model = Model()
    if "--test" in sys.argv:
        test(model)
    elif "--demo" in sys.argv:
	pickle_off = open("modelPrueba.obj","rb")
	model = pickle.load(pickle_off)
	
	
      	archivos = os.listdir('./in-to-the-wild/')
	imagenesMostrar = random.sample()
	font = cv2.FONT_HERSHEY_SIMPLEX
	def recortarGuardar(file):
	    img = cv2.imread(file)
	    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	    gray = cv2.resize(gray,(48,48))
	    imageTag =  sigmoid(model.forward(gray))
	    gray = cv2.putText(gray, imageTag, (10,80),font,0.4,300,2)
	    return gray
	ListaImagenes = [recortar-guardar(y) for y in imagenesMostrar]
	vstack1 = np.vstack((ListaImagenes[0],ListaImagenes[1]))
	vstack2 = np.vstack((ListaImagenes[2],ListaImagenes[3]))
	vstack3 = np.vstack((ListaImagenes[4],ListaImagenes[5]))

	hstack1 = np.hstack((vstack1,vstack2))
	hstack2 = np.hstack((hstack1,vstack3))


	cv2.imshow("frame1",hstack2) #display in windows 
	cv2.waitKey(0) 

    else:
        train(model)
        test(model)
